/*
 * Automatically generated by jrpcgen 1.0.5 on 3/18/20, 3:31 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://acplt.org/ks/remotetea.html for details
 */
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class ChatServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public ChatServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public ChatServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public ChatServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(Chat.CHAT_PROG, 1),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 1 ) {
            switch ( procedure ) {
            case 0: {
                Chaine args$ = new Chaine();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(connect_1(args$));
                call.reply(result$);
                break;
            }
            case 1: {
                Chaine args$ = new Chaine();
                call.retrieveCall(args$);
                sendMessage_1(args$);
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 2: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                MessageList result$ = resyncMessages_1();
                call.reply(result$);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProcedureUnavailable();
        }
    }

    public abstract int connect_1(Chaine nickname);

    public abstract void sendMessage_1(Chaine message);

    public abstract MessageList resyncMessages_1();

}
// End of ChatServerStub.java
